{"version":3,"sources":["project.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","Game","module","cc","_RFpush","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","url","AudioClip","onLoad","this","groundY","y","height","timer","starDuration","spawnNewStar","score","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","random0To1","randX","randY","jumpHeight","maxX","width","randomMinus1To1","p","update","dt","gameOver","gainScore","string","toString","audioEngine","playEffect","stopAllActions","director","loadScene","_RFpop","Player","jumpDuration","maxMoveSpeed","accel","jumpAudio","setJumpAction","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","setInputControl","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","accLeft","accRight","d","onKeyReleased","jumpAction","runAction","xSpeed","Math","abs","x","Star","pickRadius","getPlayerDistance","playerPos","getPosition","dist","pDistance","position","onPicked","destroy","opacityRatio","minOpacity","opacity","floor"],"mappings":"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","file":"project.js","sourcesContent":["require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"Game\":[function(require,module,exports){\ncc._RFpush(module, '18b8cGk6GxHz4GTlXXYGBV9', 'Game');\n// scripts\\Game.js\n\n'use strict';\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n        //得分\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height / 2;\n        // 初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n        // 生成一个新的星星\n        this.spawnNewStar();\n        // 初始化计分\n        this.score = 0;\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('Star').game = this;\n        // 重置计时器，根据消失时间范围随机取一个值\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n        // 返回星星坐标\n        return cc.p(randX, randY);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gainScore: function gainScore() {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    gameOver: function gameOver() {\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\n        cc.director.loadScene('game');\n    }\n});\n\ncc._RFpop();\n},{}],\"Player\":[function(require,module,exports){\ncc._RFpush(module, 'd9d88ijfhpHfIE4/2Fbl7H3', 'Player');\n// scripts\\Player.js\n\n\"use strict\";\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        //主角跳跃高度\n        jumpHeight: 0,\n        //主角跳跃持续时间\n        jumpDuration: 0,\n        //最大移动速度\n        maxMoveSpeed: 0,\n        //加速度\n        accel: 0,\n        // 跳跃音效资源\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    setJumpAction: function setJumpAction() {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function playJumpSound() {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    setInputControl: function setInputControl() {\n        var self = this;\n        // 添加键盘事件监听\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // 有按键按下时，判断是否是我们指定的方向控制键，并设置向对应方向加速\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // 松开按键时，停止向该方向的加速\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n\n        // 初始化键盘输入监听\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    }\n});\n\ncc._RFpop();\n},{}],\"Star\":[function(require,module,exports){\ncc._RFpush(module, '8b8c0SIr+tCkY5qRwCx5Gew', 'Star');\n// scripts\\Star.js\n\n\"use strict\";\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    getPlayerDistance: function getPlayerDistance() {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }\n});\n\ncc._RFpop();\n},{}]},{},[\"Game\",\"Star\",\"Player\"]);\n"],"sourceRoot":"/source/"}